"use client";

import { useEffect, useRef, useState } from "react";
import "../components/kaiwa/kaiwa.css";
import { useParams, useLocation, useNavigate } from "react-router-dom";
import { ZegoUIKitPrebuilt } from "@zegocloud/zego-uikit-prebuilt";
import { APP_ID, SECRET } from "../Config";
import axios from "axios";

const Kaiwa = () => {
  const { roomId } = useParams();
  const location = useLocation();
  const navigate = useNavigate();
  const zpRef = useRef(null);
  const videoContainerRef = useRef(null);
  const [joined, setJoined] = useState(false);
  const [callType, setCallType] = useState("");
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);
  const [analysisResult, setAnalysisResult] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [showExitScreen, setShowExitScreen] = useState(false);
  const [exitCountdown, setExitCountdown] = useState(0);
  const streamRef = useRef(null);

  // Debug: Log t·∫•t c·∫£ state changes
  useEffect(() => {
    console.log("üîç DEBUG - State changes:", {
      joined,
      isRecording,
      isProcessing,
      hasAnalysisResult: !!analysisResult,
      analysisResultLength: analysisResult.length,
      showExitScreen,
    });
  }, [joined, isRecording, isProcessing, analysisResult, showExitScreen]);

  // Kh·ªüi t·∫°o ghi √¢m
  const startRecording = async () => {
    try {
      console.log("üéôÔ∏è B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o ghi √¢m...");

      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100,
        },
      });

      streamRef.current = stream;
      audioChunksRef.current = []; // Reset chunks

      const options = {
        mimeType: "audio/webm;codecs=opus",
      };

      if (!MediaRecorder.isTypeSupported(options.mimeType)) {
        options.mimeType = "audio/mp4";
        if (!MediaRecorder.isTypeSupported(options.mimeType)) {
          options.mimeType = "audio/wav";
        }
      }

      console.log("üéµ S·ª≠ d·ª•ng MIME type:", options.mimeType);

      mediaRecorderRef.current = new MediaRecorder(stream, options);

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
          console.log(
            `üìä Thu th·∫≠p chunk ${audioChunksRef.current.length}: ${event.data.size} bytes`
          );
        }
      };

      mediaRecorderRef.current.onstart = () => {
        setIsRecording(true);
        console.log("‚úÖ Ghi √¢m ƒë√£ b·∫Øt ƒë·∫ßu");
      };

      mediaRecorderRef.current.onstop = async () => {
        setIsRecording(false);
        console.log("‚èπÔ∏è Ghi √¢m ƒë√£ d·ª´ng, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...");
        await processAudioData();
      };

      mediaRecorderRef.current.start(1000);
      console.log("üöÄ MediaRecorder ƒë√£ start");
    } catch (err) {
      console.error("‚ùå L·ªói kh·ªüi t·∫°o ghi √¢m:", err);
      alert("Kh√¥ng th·ªÉ truy c·∫≠p microphone. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p!");
    }
  };

  // X·ª≠ l√Ω d·ªØ li·ªáu audio
  const processAudioData = async () => {
    console.log("üîÑ B·∫Øt ƒë·∫ßu processAudioData...");
    console.log("üìä S·ªë chunks:", audioChunksRef.current.length);

    if (audioChunksRef.current.length === 0) {
      console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu audio ƒë·ªÉ x·ª≠ l√Ω");
      setAnalysisResult(
        "Kh√¥ng c√≥ d·ªØ li·ªáu audio ƒë∆∞·ª£c ghi l·∫°i. Vui l√≤ng th·ª≠ l·∫°i."
      );
      return;
    }

    console.log(`üì¶ X·ª≠ l√Ω ${audioChunksRef.current.length} chunks audio`);

    const mimeType =
      mediaRecorderRef.current?.mimeType || "audio/webm;codecs=opus";
    const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });

    console.log(`üíæ K√≠ch th∆∞·ªõc audio blob: ${audioBlob.size} bytes`);

    if (audioBlob.size === 0) {
      console.log("‚ö†Ô∏è Audio blob tr·ªëng");
      setAnalysisResult("Audio blob r·ªóng. Vui l√≤ng ki·ªÉm tra microphone.");
      return;
    }

    const formData = new FormData();
    const extension = mimeType.includes("webm")
      ? "webm"
      : mimeType.includes("mp4")
      ? "mp4"
      : "wav";
    formData.append("audio", audioBlob, `recording.${extension}`);

    console.log(`üì§ Chu·∫©n b·ªã g·ª≠i file: recording.${extension}`);

    setIsProcessing(true);

    try {
      console.log("üåê G·ª≠i request ƒë·∫øn server...");
      const response = await axios.post(
        "http://localhost:2704/api/analyze",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
          timeout: 60000,
        }
      );

      console.log("‚úÖ Nh·∫≠n response t·ª´ server:", response.data);
      console.log("üìù Summary content:", response.data.summary);

      if (response.data && response.data.summary) {
        setAnalysisResult(response.data.summary);
        console.log(
          "‚úÖ ƒê√£ set analysisResult:",
          response.data.summary.substring(0, 100) + "..."
        );

        // L∆∞u v√†o localStorage ƒë·ªÉ backup
        localStorage.setItem(
          "lastMeetingAnalysis",
          JSON.stringify({
            result: response.data.summary,
            timestamp: new Date().toISOString(),
          })
        );
        console.log("üíæ ƒê√£ l∆∞u v√†o localStorage");
      } else {
        console.log("‚ö†Ô∏è Response kh√¥ng c√≥ summary");
        setAnalysisResult("Server tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.");
      }
    } catch (error) {
      console.error("‚ùå L·ªói g·ª≠i audio:", error);

      let errorMessage = "L·ªói kh√¥ng x√°c ƒë·ªãnh.";

      if (error.code === "ECONNABORTED") {
        errorMessage = "L·ªói: Qu√° th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i.";
      } else if (error.response?.data?.error?.includes("insufficient_quota")) {
        errorMessage =
          "L·ªói: T√†i kho·∫£n OpenAI ƒë√£ h·∫øt h·∫°n m·ª©c. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.";
      } else if (error.response?.data?.error) {
        errorMessage = `L·ªói server: ${error.response.data.error}`;
      } else if (error.message) {
        errorMessage = `L·ªói k·∫øt n·ªëi: ${error.message}`;
      }

      setAnalysisResult(errorMessage);
      console.log("‚ùå ƒê√£ set error message:", errorMessage);
    } finally {
      setIsProcessing(false);
      console.log("üèÅ processAudioData ho√†n th√†nh");
    }
  };

  // D·ª´ng ghi √¢m
  const stopRecording = async () => {
    console.log("‚èπÔ∏è Y√™u c·∫ßu d·ª´ng ghi √¢m...");

    return new Promise((resolve) => {
      if (
        mediaRecorderRef.current &&
        mediaRecorderRef.current.state === "recording"
      ) {
        console.log("‚èπÔ∏è ƒêang d·ª´ng MediaRecorder...");

        mediaRecorderRef.current.onstop = async () => {
          console.log("‚úÖ MediaRecorder ƒë√£ d·ª´ng, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...");
          await processAudioData();
          resolve();
        };

        mediaRecorderRef.current.stop();

        if (streamRef.current) {
          streamRef.current.getTracks().forEach((track) => track.stop());
          console.log("üîå ƒê√£ d·ª´ng media stream");
        }
      } else {
        console.log("‚ö†Ô∏è MediaRecorder kh√¥ng trong tr·∫°ng th√°i recording");
        resolve();
      }
    });
  };

  // Handle exit v·ªõi delay ƒë·ªÉ xem k·∫øt qu·∫£
  const handleExit = async () => {
    console.log("üö™ B·∫Øt ƒë·∫ßu tho√°t ph√≤ng...");

    // Hi·ªán m√†n h√¨nh exit
    setShowExitScreen(true);

    // D·ª´ng ghi √¢m v√† x·ª≠ l√Ω
    console.log("‚èπÔ∏è D·ª´ng ghi √¢m tr∆∞·ªõc khi tho√°t...");
    await stopRecording();

    // Destroy video call
    if (zpRef.current) {
      zpRef.current.destroy();
      console.log("üìπ ƒê√£ destroy video call");
    }

    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o analysis ho√†n th√†nh
    console.log("‚è≥ ƒê·ª£i analysis ho√†n th√†nh...");
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // ƒê·∫øm ng∆∞·ª£c ƒë·ªÉ user xem k·∫øt qu·∫£
    let countdown = 600; // TƒÉng l√™n 20 gi√¢y
    setExitCountdown(countdown);

    console.log("‚è±Ô∏è B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c:", countdown);

    const countdownInterval = setInterval(() => {
      countdown--;
      setExitCountdown(countdown);
      console.log("‚è±Ô∏è Countdown:", countdown);

      if (countdown <= 0) {
        clearInterval(countdownInterval);
        console.log("üè† Chuy·ªÉn v·ªÅ trang ch·ªß");
        navigate("/room");
      }
    }, 1000);
  };

  // Force exit ngay l·∫≠p t·ª©c
  const forceExit = () => {
    console.log("üèÉ‚Äç‚ôÇÔ∏è Force exit");
    navigate("/room");
  };

  // D·ªçn d·∫πp khi component unmount
  useEffect(() => {
    return () => {
      console.log("üßπ Component cleanup");
      if (mediaRecorderRef.current?.state === "recording") {
        mediaRecorderRef.current.stop();
      }
      if (streamRef.current) {
        streamRef.current.getTracks().forEach((track) => track.stop());
      }
    };
  }, []);

  const myMeeting = (type) => {
    const appID = APP_ID;
    const serverSecret = SECRET;
    const kitToken = ZegoUIKitPrebuilt.generateKitTokenForTest(
      appID,
      serverSecret,
      roomId,
      Date.now().toString(),
      "Your Name"
    );

    const zp = ZegoUIKitPrebuilt.create(kitToken);
    zpRef.current = zp;

    zp.joinRoom({
      container: videoContainerRef.current,
      sharedLinks: [
        {
          name: "Video Call Link",
          url:
            window.location.protocol +
            "//" +
            window.location.host +
            window.location.pathname +
            "?type=" +
            encodeURIComponent(type),
        },
      ],
      scenario: {
        mode:
          type === "one-on-one"
            ? ZegoUIKitPrebuilt.OneONoneCall
            : ZegoUIKitPrebuilt.GroupCall,
      },
      maxUsers: type === "one-on-one" ? 2 : 10,
      onJoinRoom: () => {
        console.log("üéâ ƒê√£ join room");
        setJoined(true);
      },
      onLeaveRoom: () => {
        console.log("üëã Leave room triggered");
        handleExit(); // S·ª≠ d·ª•ng handleExit thay v√¨ navigate tr·ª±c ti·∫øp
      },
    });
  };

  useEffect(() => {
    if (joined) {
      console.log("üéâ Joined room, starting recording...");
      startRecording();
    }
  }, [joined]);

  useEffect(() => {
    const query = new URLSearchParams(location.search);
    const type = query.get("type");
    console.log("üîó Call type from URL:", type);
    setCallType(type);
  }, [location.search]);

  useEffect(() => {
    if (callType) {
      console.log("üìû Initializing meeting with type:", callType);
      myMeeting(callType);
    }
  }, [callType, roomId, navigate]);

  // N·∫øu ƒëang hi·ªán exit screen
  if (showExitScreen) {
    return (
      <div className="exit-screen">
        <div className="analysis-container">
          <div className="analysis-header">
            <div className="analysis-icon">üìä</div>
            <h2 className="analysis-title">Ph√¢n t√≠ch cu·ªôc h·ªçp</h2>
          </div>

          {isProcessing && (
            <div className="analysis-loading">
              <div className="loading-spinner"></div>
              <p className="loading-text">
                ƒêang ph√¢n t√≠ch n·ªôi dung cu·ªôc h·ªçp...
              </p>
            </div>
          )}

          {analysisResult && (
            <div className="analysis-result">
              <div className="result-header">
                <h3 className="result-title">K·∫øt qu·∫£ ph√¢n t√≠ch</h3>
                <div className="result-actions">
                  <button
                    className="action-button copy-button"
                    onClick={() => {
                      navigator.clipboard
                        .writeText(analysisResult)
                        .then(() => alert("ƒê√£ sao ch√©p k·∫øt qu·∫£!"))
                        .catch((err) =>
                          console.error("L·ªói khi sao ch√©p: ", err)
                        );
                    }}
                  >
                    <span className="button-icon">üìã</span>
                    <span className="button-text">Sao ch√©p</span>
                  </button>
                </div>
              </div>
              <div className="result-content">{analysisResult}</div>
            </div>
          )}

          {!isProcessing && !analysisResult && (
            <div className="error-message">
              ‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch. Vui l√≤ng th·ª≠ l·∫°i.
            </div>
          )}

          <div className="exit-footer">
            {exitCountdown > 0 ? (
              <>
                <p className="countdown-info">
                  T·ª± ƒë·ªông chuy·ªÉn v·ªÅ trang ch·ªß sau:{" "}
                  <strong>{exitCountdown}s</strong>
                </p>
                <button
                  onClick={forceExit}
                  className="action-button exit-button"
                >
                  <span className="button-icon">üö™</span>
                  <span className="button-text">Tho√°t ngay</span>
                </button>
              </>
            ) : (
              <p className="redirect-info">ƒêang chuy·ªÉn h∆∞·ªõng...</p>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="room-container">
      {!joined && (
        <>
          <header className="room-header">
            {callType === "one-on-one"
              ? "One-on-One Video Call"
              : "Group Video Call"}
          </header>
          <button className="exit-button" onClick={handleExit}>
            Exit
          </button>
        </>
      )}

      <div className="recording-status">
        {isRecording ? (
          <p style={{ color: "green", fontWeight: "bold" }}>
            üî¥ ƒêang ghi √¢m cu·ªôc h·ªçp...
          </p>
        ) : joined ? (
          <p style={{ color: "orange" }}>‚è∏Ô∏è Ghi √¢m t·∫°m d·ª´ng</p>
        ) : (
          <p style={{ color: "red" }}>‚ö´ Ch∆∞a b·∫Øt ƒë·∫ßu ghi √¢m</p>
        )}
      </div>

      <div ref={videoContainerRef} className="video-container" />
    </div>
  );
};

export default Kaiwa;
